{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Imran Khan\\\\Desktop\\\\Blockchain\\\\eth_daddy\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Search from './components/Search';\nimport Domain from './components/Domain';\n\n// ABIs\nimport ETHDaddy from './abis/ETHDaddy.json';\n\n// Config\nimport config from './config.json';\n\n// tokens convertor\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tokens = n => {\n  return ethers.utils.parseUnits(n.toString(), 'ether');\n};\nfunction App() {\n  _s();\n  const [name, setName] = useState(\"\");\n  const [cost, setCost] = useState(\"\");\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [ethDaddy, setEthDaddy] = useState(null);\n  const [domains, setDomains] = useState([]);\n  const loadBlockchainData = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(provider);\n    const network = await provider.getNetwork();\n    const ethDaddy = new ethers.Contract(config[network.chainId].ETHDaddy.address, ETHDaddy, provider);\n    setEthDaddy(ethDaddy);\n    const maxSupply = await ethDaddy.maxSupply();\n    const domains = [];\n    for (var i = 1; i <= maxSupply; i++) {\n      const domain = await ethDaddy.getDomain(i);\n      domains.push(domain);\n    }\n    setDomains(domains);\n    window.ethereum.on('accountsChanged', async () => {\n      const accounts = await window.ethereum.request({\n        'method': 'eth_requestAccounts'\n      });\n      const account = ethers.utils.getAddress(accounts[0]);\n      setAccount(account);\n    });\n  };\n\n  // Withdraw Balence\n  const withdrawBalence = async () => {\n    const signer = await provider.getSigner();\n    const transaction = await ethDaddy.connect(signer).withdraw();\n    await transaction.wait();\n  };\n\n  // Withdraw Balence\n  const listDomain = async () => {\n    // console.log(name,' ', cost);\n    const signer = await provider.getSigner();\n    const transaction = await ethDaddy.connect(signer).list(name, tokens(cost));\n    await transaction.wait();\n    loadBlockchainData();\n  };\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards__section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"cards__title\",\n        children: \"Why you need a domain name.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cards__description\",\n        children: \"Own your custom username, use it across services, and be able to store on avatar and other profile data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: domains.map((domain, index) => /*#__PURE__*/_jsxDEV(Domain, {\n          domain: domain,\n          ethDaddy: ethDaddy,\n          provider: provider,\n          id: index + 1\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), account == '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266' ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"card__button\",\n        onClick: withdrawBalence,\n        children: \" Withdraw All Balence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: e => setName(e.target.value),\n          value: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: e => setCost(e.target.value),\n          value: cost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"card__button\",\n          onClick: listDomain,\n          children: \"Add Domain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CLShIEOk0YSulhtzYL+Ac8c87Hs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","Navigation","Search","Domain","ETHDaddy","config","tokens","n","utils","parseUnits","toString","App","name","setName","cost","setCost","provider","setProvider","account","setAccount","ethDaddy","setEthDaddy","domains","setDomains","loadBlockchainData","providers","Web3Provider","window","ethereum","network","getNetwork","Contract","chainId","address","maxSupply","i","domain","getDomain","push","on","accounts","request","getAddress","withdrawBalence","signer","getSigner","transaction","connect","withdraw","wait","listDomain","list","map","index","e","target","value"],"sources":["C:/Users/Imran Khan/Desktop/Blockchain/eth_daddy/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\n\r\n// Components\r\nimport Navigation from './components/Navigation'\r\nimport Search from './components/Search'\r\nimport Domain from './components/Domain'\r\n\r\n// ABIs\r\nimport ETHDaddy from './abis/ETHDaddy.json'\r\n\r\n// Config\r\nimport config from './config.json';\r\n\r\n// tokens convertor\r\nconst tokens = (n) => {\r\n  return ethers.utils.parseUnits(n.toString(), 'ether')\r\n}\r\n\r\nfunction App() {\r\n  const [name, setName] = useState(\"\");\r\n  const [cost, setCost] = useState(\"\");\r\n\r\n  const [provider, setProvider] = useState(null)\r\n  const [account, setAccount] = useState(null)\r\n\r\n  const [ethDaddy, setEthDaddy] = useState(null)\r\n  const [domains, setDomains] = useState([])\r\n\r\n  const loadBlockchainData = async () => {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n    setProvider(provider)\r\n\r\n    const network = await provider.getNetwork()\r\n\r\n    const ethDaddy = new ethers.Contract(config[network.chainId].ETHDaddy.address, ETHDaddy, provider)\r\n    setEthDaddy(ethDaddy)\r\n\r\n    const maxSupply = await ethDaddy.maxSupply()\r\n    const domains = []\r\n    \r\n    for (var i = 1; i<= maxSupply; i++) {\r\n      const domain = await ethDaddy.getDomain(i)\r\n      domains.push(domain)\r\n    }\r\n\r\n    setDomains(domains)\r\n\r\n    window.ethereum.on('accountsChanged', async () => {\r\n      const accounts = await window.ethereum.request({ 'method': 'eth_requestAccounts' })\r\n      const account = ethers.utils.getAddress(accounts[0])\r\n      setAccount(account)\r\n    })\r\n  }\r\n\r\n  // Withdraw Balence\r\n  const withdrawBalence = async () => {\r\n    const signer = await provider.getSigner()\r\n    const transaction = await ethDaddy.connect(signer).withdraw()\r\n    await transaction.wait()\r\n  }\r\n\r\n  // Withdraw Balence\r\n  const listDomain = async () => {\r\n    // console.log(name,' ', cost);\r\n    const signer = await provider.getSigner()\r\n    const transaction = await ethDaddy.connect(signer).list(name, tokens(cost))\r\n    await transaction.wait()\r\n\r\n    loadBlockchainData()\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadBlockchainData()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <Navigation account={account} setAccount={setAccount} />\r\n\r\n      <Search />\r\n\r\n      <div className='cards__section'>\r\n\r\n        <h2 className='cards__title'>Why you need a domain name.</h2>\r\n        <p className='cards__description'>\r\n          Own your custom username, use it across services, and\r\n          be able to store on avatar and other profile data.\r\n        </p>\r\n\r\n        <hr />\r\n\r\n        <div className='cards'>\r\n          {domains.map((domain, index) => (\r\n            <Domain domain={domain} ethDaddy={ethDaddy} provider={provider} id={index+1} key={index} />\r\n          ))}\r\n        </div>\r\n\r\n            {account == '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'?\r\n                        <button type='button' className='card__button' onClick={withdrawBalence}> Withdraw All Balence</button>\r\n             : ''}\r\n        \r\n\r\n        <div>\r\n          <input type='text' onChange={(e) => setName(e.target.value)} value={name} />\r\n          <input type='text' onChange={(e) => setCost(e.target.value)} value={cost}/>\r\n          <button type='button' className='card__button' onClick={listDomain}>Add Domain</button>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}