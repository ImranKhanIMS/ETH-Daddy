{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Imran Khan\\\\Desktop\\\\Blockchain\\\\eth_daddy\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Search from './components/Search';\nimport Domain from './components/Domain';\n\n// ABIs\nimport ETHDaddy from './abis/ETHDaddy.json';\n\n// Config\nimport config from './config.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [ethDaddy, setEthDaddy] = useState(null);\n  const [domains, setDomains] = useState([]);\n  const loadBlockchainData = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(provider);\n    const network = await provider.getNetwork();\n    const ethDaddy = new ethers.Contract(config[network.chainId].ETHDaddy.address, ETHDaddy, provider);\n    setEthDaddy(ethDaddy);\n    const maxSupply = await ethDaddy.maxSupply();\n    const domains = [];\n    for (var i = 1; i <= maxSupply; i++) {\n      const domain = await ethDaddy.getDomain(i);\n      domains.push(domain);\n    }\n    setDomains(domains);\n    console.log(domains);\n    window.ethereum.on('accountsChanged', async () => {\n      const accounts = await window.ethereum.request({\n        'method': 'eth_requestAccounts'\n      });\n      const account = ethers.utils.getAddress(accounts[0]);\n      setAccount(account);\n    });\n  };\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards__section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"cards__title\",\n        children: \"Why you need a domain name.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cards__description\",\n        children: \"Own your custom username, use it across services, and be able to store on avatar and other profile data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kTloHUQUOh+REs6g0/GtzxTSeWM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","Navigation","Search","Domain","ETHDaddy","config","App","provider","setProvider","account","setAccount","ethDaddy","setEthDaddy","domains","setDomains","loadBlockchainData","providers","Web3Provider","window","ethereum","network","getNetwork","Contract","chainId","address","maxSupply","i","domain","getDomain","push","console","log","on","accounts","request","utils","getAddress"],"sources":["C:/Users/Imran Khan/Desktop/Blockchain/eth_daddy/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\n\r\n// Components\r\nimport Navigation from './components/Navigation'\r\nimport Search from './components/Search'\r\nimport Domain from './components/Domain'\r\n\r\n// ABIs\r\nimport ETHDaddy from './abis/ETHDaddy.json'\r\n\r\n// Config\r\nimport config from './config.json';\r\n\r\nfunction App() {\r\n  const [provider, setProvider] = useState(null)\r\n  const [account, setAccount] = useState(null)\r\n\r\n  const [ethDaddy, setEthDaddy] = useState(null)\r\n  const [domains, setDomains] = useState([])\r\n\r\n  const loadBlockchainData = async () => {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n    setProvider(provider)\r\n\r\n    const network = await provider.getNetwork()\r\n\r\n    const ethDaddy = new ethers.Contract(config[network.chainId].ETHDaddy.address, ETHDaddy, provider)\r\n    setEthDaddy(ethDaddy)\r\n\r\n    const maxSupply = await ethDaddy.maxSupply()\r\n    const domains = []\r\n    \r\n    for (var i = 1; i<= maxSupply; i++) {\r\n      const domain = await ethDaddy.getDomain(i)\r\n      domains.push(domain)\r\n    }\r\n\r\n    setDomains(domains)\r\n    console.log(domains)\r\n\r\n    window.ethereum.on('accountsChanged', async () => {\r\n      const accounts = await window.ethereum.request({ 'method': 'eth_requestAccounts' })\r\n      const account = ethers.utils.getAddress(accounts[0])\r\n      setAccount(account)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadBlockchainData()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <Navigation account={account} setAccount={setAccount} />\r\n\r\n      <Search />\r\n\r\n      <div className='cards__section'>\r\n\r\n        <h2 className='cards__title'>Why you need a domain name.</h2>\r\n        <p className='cards__description'>\r\n          Own your custom username, use it across services, and\r\n          be able to store on avatar and other profile data.\r\n        </p>\r\n\r\n        <hr />\r\n\r\n        <div className='cards'>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}